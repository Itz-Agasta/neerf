// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: trace.proto

package trace

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --- open flags & return code ---
type Event_OpenFlags int32

const (
	Event_O_RDONLY Event_OpenFlags = 0 // Read-only
	Event_O_WRONLY Event_OpenFlags = 1 // Write-only
	Event_O_RDWR   Event_OpenFlags = 2 // Read-write
)

// Enum value maps for Event_OpenFlags.
var (
	Event_OpenFlags_name = map[int32]string{
		0: "O_RDONLY",
		1: "O_WRONLY",
		2: "O_RDWR",
	}
	Event_OpenFlags_value = map[string]int32{
		"O_RDONLY": 0,
		"O_WRONLY": 1,
		"O_RDWR":   2,
	}
)

func (x Event_OpenFlags) Enum() *Event_OpenFlags {
	p := new(Event_OpenFlags)
	*p = x
	return p
}

func (x Event_OpenFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_OpenFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_trace_proto_enumTypes[0].Descriptor()
}

func (Event_OpenFlags) Type() protoreflect.EnumType {
	return &file_trace_proto_enumTypes[0]
}

func (x Event_OpenFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_OpenFlags.Descriptor instead.
func (Event_OpenFlags) EnumDescriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{0, 0}
}

// One eBPF event per syscall
// Version 0.1 - Final for M0, extensible for M1
type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Ts    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`     // Absolute UTC timestamp for event ordering
	Pid   uint32                 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`  // PID of the calling task
	Tid   uint32                 `protobuf:"varint,3,opt,name=tid,proto3" json:"tid,omitempty"`  // TID (same as PID if single-threaded)
	Comm  string                 `protobuf:"bytes,4,opt,name=comm,proto3" json:"comm,omitempty"` // Executable name (e.g., "python3")
	// --- syscall identity ---
	Syscall string `protobuf:"bytes,5,opt,name=syscall,proto3" json:"syscall,omitempty"` // e.g., "openat", "write", "rename", "unlink"
	// --- file / path fields ---
	Path    string          `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`                                     // Absolute path (UTF-8)
	NewPath string          `protobuf:"bytes,7,opt,name=new_path,json=newPath,proto3" json:"new_path,omitempty"`                // Only for rename / link
	Flags   Event_OpenFlags `protobuf:"varint,8,opt,name=flags,proto3,enum=nerrf.trace.Event_OpenFlags" json:"flags,omitempty"` // Open flags (for openat/open)
	RetVal  int64           `protobuf:"zigzag64,9,opt,name=ret_val,json=retVal,proto3" json:"ret_val,omitempty"`                // File descriptor or error code, e.g., -EBADF
	// --- write / read specific ---
	Bytes uint64 `protobuf:"varint,10,opt,name=bytes,proto3" json:"bytes,omitempty"` // Bytes written or read
	// --- metadata for LockBit detection ---
	Inode string `protobuf:"bytes,11,opt,name=inode,proto3" json:"inode,omitempty"` // Inode as string (to avoid uint64 overflow)
	Mode  uint32 `protobuf:"varint,12,opt,name=mode,proto3" json:"mode,omitempty"`  // File mode (octal, optional)
	Uid   uint64 `protobuf:"varint,13,opt,name=uid,proto3" json:"uid,omitempty"`    // User ID, optional
	Gid   uint64 `protobuf:"varint,14,opt,name=gid,proto3" json:"gid,omitempty"`    // Group ID, optional
	// --- dependency tracking ---
	Dependencies  []string `protobuf:"bytes,15,rep,name=dependencies,proto3" json:"dependencies,omitempty"` // Dependencies for graph construction (e.g., input files or processes)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_trace_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Event) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Event) GetTid() uint32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Event) GetComm() string {
	if x != nil {
		return x.Comm
	}
	return ""
}

func (x *Event) GetSyscall() string {
	if x != nil {
		return x.Syscall
	}
	return ""
}

func (x *Event) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Event) GetNewPath() string {
	if x != nil {
		return x.NewPath
	}
	return ""
}

func (x *Event) GetFlags() Event_OpenFlags {
	if x != nil {
		return x.Flags
	}
	return Event_O_RDONLY
}

func (x *Event) GetRetVal() int64 {
	if x != nil {
		return x.RetVal
	}
	return 0
}

func (x *Event) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *Event) GetInode() string {
	if x != nil {
		return x.Inode
	}
	return ""
}

func (x *Event) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Event) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Event) GetGid() uint64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *Event) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

// Stream envelope (one per line in trace.jsonl)
type EventBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*Event               `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBatch) Reset() {
	*x = EventBatch{}
	mi := &file_trace_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBatch) ProtoMessage() {}

func (x *EventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_trace_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBatch.ProtoReflect.Descriptor instead.
func (*EventBatch) Descriptor() ([]byte, []int) {
	return file_trace_proto_rawDescGZIP(), []int{1}
}

func (x *EventBatch) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

var File_trace_proto protoreflect.FileDescriptor

const file_trace_proto_rawDesc = "" +
	"\n" +
	"\vtrace.proto\x12\vnerrf.trace\x1a\x1fgoogle/protobuf/timestamp.proto\"\xbe\x03\n" +
	"\x05Event\x12*\n" +
	"\x02ts\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x02ts\x12\x10\n" +
	"\x03pid\x18\x02 \x01(\rR\x03pid\x12\x10\n" +
	"\x03tid\x18\x03 \x01(\rR\x03tid\x12\x12\n" +
	"\x04comm\x18\x04 \x01(\tR\x04comm\x12\x18\n" +
	"\asyscall\x18\x05 \x01(\tR\asyscall\x12\x12\n" +
	"\x04path\x18\x06 \x01(\tR\x04path\x12\x19\n" +
	"\bnew_path\x18\a \x01(\tR\anewPath\x122\n" +
	"\x05flags\x18\b \x01(\x0e2\x1c.nerrf.trace.Event.OpenFlagsR\x05flags\x12\x17\n" +
	"\aret_val\x18\t \x01(\x12R\x06retVal\x12\x14\n" +
	"\x05bytes\x18\n" +
	" \x01(\x04R\x05bytes\x12\x14\n" +
	"\x05inode\x18\v \x01(\tR\x05inode\x12\x12\n" +
	"\x04mode\x18\f \x01(\rR\x04mode\x12\x10\n" +
	"\x03uid\x18\r \x01(\x04R\x03uid\x12\x10\n" +
	"\x03gid\x18\x0e \x01(\x04R\x03gid\x12\"\n" +
	"\fdependencies\x18\x0f \x03(\tR\fdependencies\"3\n" +
	"\tOpenFlags\x12\f\n" +
	"\bO_RDONLY\x10\x00\x12\f\n" +
	"\bO_WRONLY\x10\x01\x12\n" +
	"\n" +
	"\x06O_RDWR\x10\x02\"8\n" +
	"\n" +
	"EventBatch\x12*\n" +
	"\x06events\x18\x01 \x03(\v2\x12.nerrf.trace.EventR\x06eventsB\rZ\vnerrf/traceb\x06proto3"

var (
	file_trace_proto_rawDescOnce sync.Once
	file_trace_proto_rawDescData []byte
)

func file_trace_proto_rawDescGZIP() []byte {
	file_trace_proto_rawDescOnce.Do(func() {
		file_trace_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_trace_proto_rawDesc), len(file_trace_proto_rawDesc)))
	})
	return file_trace_proto_rawDescData
}

var file_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_trace_proto_goTypes = []any{
	(Event_OpenFlags)(0),          // 0: nerrf.trace.Event.OpenFlags
	(*Event)(nil),                 // 1: nerrf.trace.Event
	(*EventBatch)(nil),            // 2: nerrf.trace.EventBatch
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_trace_proto_depIdxs = []int32{
	3, // 0: nerrf.trace.Event.ts:type_name -> google.protobuf.Timestamp
	0, // 1: nerrf.trace.Event.flags:type_name -> nerrf.trace.Event.OpenFlags
	1, // 2: nerrf.trace.EventBatch.events:type_name -> nerrf.trace.Event
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_trace_proto_init() }
func file_trace_proto_init() {
	if File_trace_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_trace_proto_rawDesc), len(file_trace_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trace_proto_goTypes,
		DependencyIndexes: file_trace_proto_depIdxs,
		EnumInfos:         file_trace_proto_enumTypes,
		MessageInfos:      file_trace_proto_msgTypes,
	}.Build()
	File_trace_proto = out.File
	file_trace_proto_goTypes = nil
	file_trace_proto_depIdxs = nil
}
